// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TrainingPlanner.Data;

namespace TrainingPlanner.Data.Migrations
{
    [DbContext(typeof(TrainingPlannerDbContext))]
    [Migration("20191115121551_BodyInjuries")]
    partial class BodyInjuries
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.6-servicing-10079")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("RoleId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128);

                    b.Property<string>("Name")
                        .HasMaxLength(128);

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("TrainingPlanner.Data.Entities.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<DateTime>("BirthDate");

                    b.Property<string>("City");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<string>("FirstName");

                    b.Property<string>("Gender");

                    b.Property<string>("LastName");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("ProfilePicture");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("TrainingPlanner.Data.Entities.BodyInjury", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("BodyMeasurementId");

                    b.Property<string>("Injury");

                    b.HasKey("Id");

                    b.HasIndex("BodyMeasurementId");

                    b.ToTable("BodyInjuries");
                });

            modelBuilder.Entity("TrainingPlanner.Data.Entities.BodyMeasurement", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Age");

                    b.Property<int?>("Biceps");

                    b.Property<int?>("Calf");

                    b.Property<int?>("Chest");

                    b.Property<DateTime>("Date");

                    b.Property<int>("Fat");

                    b.Property<int>("FatMass");

                    b.Property<int?>("Forearm");

                    b.Property<int>("Height");

                    b.Property<int?>("Hips");

                    b.Property<bool>("IsInjured");

                    b.Property<int>("MetabolicAge");

                    b.Property<int>("MuscleMass");

                    b.Property<int?>("Neck");

                    b.Property<int?>("Shoulders");

                    b.Property<int?>("Thigh");

                    b.Property<string>("UserId");

                    b.Property<int?>("Waist");

                    b.Property<int>("Weight");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("BodyMeasurements");
                });

            modelBuilder.Entity("TrainingPlanner.Data.Entities.Club", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("City");

                    b.Property<string>("Description");

                    b.Property<string>("Email");

                    b.Property<string>("Name");

                    b.Property<string>("PhoneNumber");

                    b.Property<string>("PostalCode");

                    b.Property<string>("StreetName");

                    b.Property<string>("StreetNumber");

                    b.Property<string>("UserId");

                    b.Property<int>("ViewCounter");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Clubs");
                });

            modelBuilder.Entity("TrainingPlanner.Data.Entities.ClubActivity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Calories");

                    b.Property<int>("ClubId");

                    b.Property<int>("Duration");

                    b.Property<string>("Level");

                    b.Property<string>("Name");

                    b.Property<string>("Picture");

                    b.HasKey("Id");

                    b.HasIndex("ClubId");

                    b.ToTable("ClubActivities");
                });

            modelBuilder.Entity("TrainingPlanner.Data.Entities.ClubCard", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("ClubId");

                    b.Property<string>("ClubName");

                    b.Property<int>("Entries");

                    b.Property<int>("EntriesLeft");

                    b.Property<DateTime?>("ExpirationDate");

                    b.Property<string>("Name");

                    b.Property<double>("Price");

                    b.Property<DateTime>("PurchaseDate");

                    b.Property<string>("UserId");

                    b.Property<string>("UserName");

                    b.Property<int>("ValidityPeriod");

                    b.HasKey("Id");

                    b.HasIndex("ClubId");

                    b.HasIndex("UserId");

                    b.ToTable("ClubCards");
                });

            modelBuilder.Entity("TrainingPlanner.Data.Entities.ClubPrice", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ClubId");

                    b.Property<int>("Entries");

                    b.Property<string>("Name");

                    b.Property<double>("Price");

                    b.Property<int>("ValidityPeriod");

                    b.HasKey("Id");

                    b.HasIndex("ClubId");

                    b.ToTable("ClubPrices");
                });

            modelBuilder.Entity("TrainingPlanner.Data.Entities.ClubRate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ClubId");

                    b.Property<string>("Description");

                    b.Property<int>("Rate");

                    b.Property<string>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("ClubId");

                    b.HasIndex("UserId");

                    b.ToTable("ClubRatings");
                });

            modelBuilder.Entity("TrainingPlanner.Data.Entities.ClubTrainer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ClubId");

                    b.Property<string>("Description");

                    b.Property<string>("Name");

                    b.Property<string>("Picture");

                    b.HasKey("Id");

                    b.HasIndex("ClubId");

                    b.ToTable("ClubTrainers");
                });

            modelBuilder.Entity("TrainingPlanner.Data.Entities.ClubWorkingHours", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CloseHour");

                    b.Property<int>("ClubId");

                    b.Property<string>("Day");

                    b.Property<string>("OpenHour");

                    b.HasKey("Id");

                    b.HasIndex("ClubId");

                    b.ToTable("ClubWorkingHours");
                });

            modelBuilder.Entity("TrainingPlanner.Data.Entities.FavouriteClub", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("ClubId");

                    b.Property<string>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("ClubId");

                    b.HasIndex("UserId");

                    b.ToTable("FavouriteClubs");
                });

            modelBuilder.Entity("TrainingPlanner.Data.Entities.FavouriteTrainer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("TrainerId");

                    b.Property<string>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("TrainerId");

                    b.HasIndex("UserId");

                    b.ToTable("FavouriteTrainers");
                });

            modelBuilder.Entity("TrainingPlanner.Data.Entities.Picture", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ClubId");

                    b.Property<string>("Data");

                    b.Property<int>("DisplayOrder");

                    b.Property<bool>("IsMiniature");

                    b.HasKey("Id");

                    b.HasIndex("ClubId");

                    b.ToTable("Pictures");
                });

            modelBuilder.Entity("TrainingPlanner.Data.Entities.Sport", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("Sports");
                });

            modelBuilder.Entity("TrainingPlanner.Data.Entities.Trainer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description");

                    b.Property<string>("PhoneNumber");

                    b.Property<string>("UserId");

                    b.Property<int>("ViewCounter");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Trainers");
                });

            modelBuilder.Entity("TrainingPlanner.Data.Entities.TrainerCard", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Entries");

                    b.Property<int>("EntriesLeft");

                    b.Property<DateTime?>("ExpirationDate");

                    b.Property<string>("Name");

                    b.Property<double>("Price");

                    b.Property<DateTime>("PurchaseDate");

                    b.Property<int?>("TrainerId");

                    b.Property<string>("TrainerName");

                    b.Property<string>("UserId");

                    b.Property<string>("UserName");

                    b.Property<int>("ValidityPeriod");

                    b.HasKey("Id");

                    b.HasIndex("TrainerId");

                    b.HasIndex("UserId");

                    b.ToTable("TrainerCards");
                });

            modelBuilder.Entity("TrainingPlanner.Data.Entities.TrainerPrice", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Entries");

                    b.Property<string>("Name");

                    b.Property<double>("Price");

                    b.Property<int>("TrainerId");

                    b.Property<int>("ValidityPeriod");

                    b.HasKey("Id");

                    b.HasIndex("TrainerId");

                    b.ToTable("TrainerPrices");
                });

            modelBuilder.Entity("TrainingPlanner.Data.Entities.TrainerRate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description");

                    b.Property<int>("Rate");

                    b.Property<int>("TrainerId");

                    b.Property<string>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("TrainerId");

                    b.HasIndex("UserId");

                    b.ToTable("TrainerRatings");
                });

            modelBuilder.Entity("TrainingPlanner.Data.Entities.TrainerSport", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("SportId");

                    b.Property<int>("TrainerId");

                    b.HasKey("Id");

                    b.HasIndex("SportId");

                    b.HasIndex("TrainerId");

                    b.ToTable("TrainerSports");
                });

            modelBuilder.Entity("TrainingPlanner.Data.Entities.UserLocation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Location");

                    b.Property<string>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserLocations");
                });

            modelBuilder.Entity("TrainingPlanner.Data.Entities.UserSport", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Sport");

                    b.Property<string>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserSports");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("TrainingPlanner.Data.Entities.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("TrainingPlanner.Data.Entities.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("TrainingPlanner.Data.Entities.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("TrainingPlanner.Data.Entities.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("TrainingPlanner.Data.Entities.BodyInjury", b =>
                {
                    b.HasOne("TrainingPlanner.Data.Entities.BodyMeasurement", "BodyMeasurement")
                        .WithMany("Injuries")
                        .HasForeignKey("BodyMeasurementId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("TrainingPlanner.Data.Entities.BodyMeasurement", b =>
                {
                    b.HasOne("TrainingPlanner.Data.Entities.ApplicationUser", "User")
                        .WithMany("BodyMeasurements")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("TrainingPlanner.Data.Entities.Club", b =>
                {
                    b.HasOne("TrainingPlanner.Data.Entities.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("TrainingPlanner.Data.Entities.ClubActivity", b =>
                {
                    b.HasOne("TrainingPlanner.Data.Entities.Club", "Club")
                        .WithMany("Activities")
                        .HasForeignKey("ClubId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("TrainingPlanner.Data.Entities.ClubCard", b =>
                {
                    b.HasOne("TrainingPlanner.Data.Entities.Club", "Club")
                        .WithMany()
                        .HasForeignKey("ClubId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("TrainingPlanner.Data.Entities.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.SetNull);
                });

            modelBuilder.Entity("TrainingPlanner.Data.Entities.ClubPrice", b =>
                {
                    b.HasOne("TrainingPlanner.Data.Entities.Club", "Club")
                        .WithMany("PriceList")
                        .HasForeignKey("ClubId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("TrainingPlanner.Data.Entities.ClubRate", b =>
                {
                    b.HasOne("TrainingPlanner.Data.Entities.Club", "Club")
                        .WithMany("Rating")
                        .HasForeignKey("ClubId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("TrainingPlanner.Data.Entities.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("TrainingPlanner.Data.Entities.ClubTrainer", b =>
                {
                    b.HasOne("TrainingPlanner.Data.Entities.Club", "Club")
                        .WithMany("Trainers")
                        .HasForeignKey("ClubId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("TrainingPlanner.Data.Entities.ClubWorkingHours", b =>
                {
                    b.HasOne("TrainingPlanner.Data.Entities.Club", "Club")
                        .WithMany("WorkingHours")
                        .HasForeignKey("ClubId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("TrainingPlanner.Data.Entities.FavouriteClub", b =>
                {
                    b.HasOne("TrainingPlanner.Data.Entities.Club", "Club")
                        .WithMany("Favourites")
                        .HasForeignKey("ClubId");

                    b.HasOne("TrainingPlanner.Data.Entities.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("TrainingPlanner.Data.Entities.FavouriteTrainer", b =>
                {
                    b.HasOne("TrainingPlanner.Data.Entities.Trainer", "Trainer")
                        .WithMany("Favourites")
                        .HasForeignKey("TrainerId");

                    b.HasOne("TrainingPlanner.Data.Entities.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("TrainingPlanner.Data.Entities.Picture", b =>
                {
                    b.HasOne("TrainingPlanner.Data.Entities.Club", "Club")
                        .WithMany("Pictures")
                        .HasForeignKey("ClubId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("TrainingPlanner.Data.Entities.Trainer", b =>
                {
                    b.HasOne("TrainingPlanner.Data.Entities.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("TrainingPlanner.Data.Entities.TrainerCard", b =>
                {
                    b.HasOne("TrainingPlanner.Data.Entities.Trainer", "Trainer")
                        .WithMany()
                        .HasForeignKey("TrainerId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("TrainingPlanner.Data.Entities.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.SetNull);
                });

            modelBuilder.Entity("TrainingPlanner.Data.Entities.TrainerPrice", b =>
                {
                    b.HasOne("TrainingPlanner.Data.Entities.Trainer", "Trainer")
                        .WithMany("PriceList")
                        .HasForeignKey("TrainerId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("TrainingPlanner.Data.Entities.TrainerRate", b =>
                {
                    b.HasOne("TrainingPlanner.Data.Entities.Trainer", "Trainer")
                        .WithMany("Rating")
                        .HasForeignKey("TrainerId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("TrainingPlanner.Data.Entities.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("TrainingPlanner.Data.Entities.TrainerSport", b =>
                {
                    b.HasOne("TrainingPlanner.Data.Entities.Sport", "Sport")
                        .WithMany("Trainers")
                        .HasForeignKey("SportId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("TrainingPlanner.Data.Entities.Trainer", "Trainer")
                        .WithMany("Sports")
                        .HasForeignKey("TrainerId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("TrainingPlanner.Data.Entities.UserLocation", b =>
                {
                    b.HasOne("TrainingPlanner.Data.Entities.ApplicationUser", "User")
                        .WithMany("Locations")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("TrainingPlanner.Data.Entities.UserSport", b =>
                {
                    b.HasOne("TrainingPlanner.Data.Entities.ApplicationUser", "User")
                        .WithMany("Sports")
                        .HasForeignKey("UserId");
                });
#pragma warning restore 612, 618
        }
    }
}
